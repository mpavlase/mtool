#!/usr/bin/env python

import ConfigParser
import logging
import sys
import os
import xmlrpclib
import libvirt
from xml.dom.minidom import parseString as _domParseStr
import exceptions


# TODO: update to some real url
_METADATA_NS_URI = 'http://qos-manager.org/ns/1.0'


class NotFoundException(exceptions.BaseException):
    pass


class QoSManager(object):
    def __init__(self):
        self.log = logging.getLogger(self.__class__.__name__)
        self._setup_logging()
        self.config = ConfigParser.SafeConfigParser()
        self._load_default_config()
        self.config.write(sys.stdout)
        self._connect_to_libvirt()
        self._connect_to_mom()
        self.plans = None

    def _setup_logging(self):
        #formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        formatter = logging.Formatter("%(name)s.%(levelname)s: %(message)s")
        handler = logging.StreamHandler()
        handler.setFormatter(formatter)
        self.log.addHandler(handler)
        self.log.setLevel('DEBUG')

    def _get_plans(self):
        """
        Lazy loading all plans
        """
        if not self.plans:
            filename = os.path.join( \
                self.config.get('plans', 'dir'),
                self.config.get('plans', 'config-file'))

            self.plans = ConfigParser.SafeConfigParser()
            self.plans.read(filename)
        return self.plans

    def _load_default_config(self):
        defaults = {
            'libvirt': {
                'url': '',
                'metadata-uri': 'http://ovirt.org/vm/tune/1.0',
                'metadata-element': 'qos',
            },
            'plans': {
                'dir': '/home/mpavlase/prace/mom-tool/plans', #TODO
                'config-file': 'default.conf',
                'default': 'default',
            },
            'mom': {
                'rpc-url': 'http://localhost:1984/RPC2',
                'auto-refresh': True,
            },
        }

        for section in defaults:
            self.config.add_section(section)
            for k, v in defaults[section].iteritems():
                self.config.set(section, k, str(v))

    def _connect_to_libvirt(self):
        url = self.config.get('libvirt', 'url')
        self.log.info('Connecting to libvirt %s' % url)
        self.libvirt = libvirt.open(url)

    def _get_plan(self, plan):
        plans = self._get_plans()
        if plan not in plans.sections():
            raise NotFoundException('Plan "%s" is not yet defined.' % plan)

        ret = {}
        for key, val in plans.items(plan):
            ret[key] = val
        return ret

    def domain_set_plan(self, domain, plan_name):
        plan = self._get_plan(plan_name)

        xml = '<plan>%s</plan>' % plan_name
        domain.setMetadata(
            libvirt.VIR_DOMAIN_METADATA_ELEMENT,
            xml, 'qos_manager',
            _METADATA_NS_URI, 0)

        #TODO: implement write constants into XML
        self.log.warning('TODO: write real constan values, not only ' \
                         'name of plan')

        if self.config.getboolean('mom', 'auto-refresh'):
            self.refresh_mom_constats()
        else:
            self.log.info('Constants were written, but MoM don\'t know about it untill refreshConstFields will be called (or restart MoM )')

    def refresh_mom_constats(self):
        self.log.info('Attempt MoM to refresh constant fields via RPC')
        self.mom.refreshConstFields()


    def domain_get_plan(self, domain):
        xml = domain.metadata(
            libvirt.VIR_DOMAIN_METADATA_ELEMENT,
            _METADATA_NS_URI, 0)
        dom = _domParseStr(xml)
        plan = dom.getElementsByTagName('plan')[0].childNodes[0].nodeValue

        self.log.debug(plan)

    def get_domain_by_name(self, name):
        domain = self.libvirt.lookupByName(name)
        return domain

    def _connect_to_mom(self):
        url = self.config.get('mom', 'rpc-url')
        self.log.info('Connecting to MoM RPC via %s' % url)
        self.mom = xmlrpclib.ServerProxy(url)

    def plan_list(self):
        plans = self._get_plans()
        self.log.info('avaliable plans: %s' % plans.sections())


if __name__ == '__main__':
    qm = QoSManager()
    qm.plan_list()
    domain = qm.get_domain_by_name('fed-1')
    #qm.domain_set_plan(domain, 'bronze')
